From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 18 Jul 2023 14:47:02 -0700
Subject: [PATCH] Add Lifecycle Event system

This event system is separate from Bukkit's event system and is
meant for managing resources across reloads and from points in the
PluginBootstrap.

diff --git a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
index 08f2050356acaf74e3210416760e3873c2dafd2c..08525c498cab1268d6e001cc703d9eb562872a96 100644
--- a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
+++ b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
@@ -1,5 +1,6 @@
 package io.papermc.paper.plugin.bootstrap;
 
+import io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner;
 import org.jetbrains.annotations.ApiStatus;
 
 /**
@@ -10,5 +11,5 @@ import org.jetbrains.annotations.ApiStatus;
  */
 @ApiStatus.Experimental
 @ApiStatus.NonExtendable
-public interface BootstrapContext extends PluginProviderContext {
+public interface BootstrapContext extends PluginProviderContext, LifecycleEventOwner<BootstrapContext> {
 }
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/LifecycleEvent.java b/src/main/java/io/papermc/paper/plugin/lifecycle/LifecycleEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..5619e10bd6262aa766ebb855f8656c9c85bff025
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/LifecycleEvent.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.plugin.lifecycle;
+
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface LifecycleEvent {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/DummyResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/DummyResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..359bedf119d44e1a7f80d6edc16fe5f0a5afc2ac
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/DummyResourceRegistrar.java
@@ -0,0 +1,6 @@
+package io.papermc.paper.plugin.lifecycle.dummy;
+
+import io.papermc.paper.plugin.lifecycle.event.registrar.ResourceRegistrar;
+
+public class DummyResourceRegistrar implements ResourceRegistrar {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/NonRegistrarEvent.java b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/NonRegistrarEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d18c53467f4c5277c5fc245aa2ce0d1ad827617
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/NonRegistrarEvent.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.lifecycle.dummy;
+
+import io.papermc.paper.plugin.lifecycle.LifecycleEvent;
+
+public class NonRegistrarEvent implements LifecycleEvent {
+
+    public void someNonRegistrarRelatedThing() {
+        System.out.println("non registrar event");
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEventHandler.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEventHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..170b8048fb353ffbad4fb87e4b38bd75079137e8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEventHandler.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.lifecycle.event;
+
+import io.papermc.paper.plugin.lifecycle.LifecycleEvent;
+import org.jetbrains.annotations.NotNull;
+
+@FunctionalInterface
+public interface LifecycleEventHandler<E extends LifecycleEvent> {
+
+    void run(@NotNull E event);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEventOwner.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEventOwner.java
new file mode 100644
index 0000000000000000000000000000000000000000..7349d713a0d731c58291e6589d8539d5e804602b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEventOwner.java
@@ -0,0 +1,15 @@
+package io.papermc.paper.plugin.lifecycle.event;
+
+import io.papermc.paper.plugin.lifecycle.LifecycleEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface LifecycleEventOwner<O extends LifecycleEventOwner<O>> {
+    
+    @SuppressWarnings("unchecked")
+    default <E extends LifecycleEvent> void handleLifecycleEvent(final @NotNull LifecycleEventType<? super O, E> lifecycleEventType, final @NotNull LifecycleEventHandler<? super E> lifecycleEventHandler) {
+        lifecycleEventType.add((O) this, lifecycleEventHandler);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEventType.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEventType.java
new file mode 100644
index 0000000000000000000000000000000000000000..9f90e6823091850b15b89350181079327c0e39f8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEventType.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.plugin.lifecycle.event;
+
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.lifecycle.LifecycleEvent;
+import java.util.List;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public abstract class LifecycleEventType<O extends LifecycleEventOwner<O>, E extends LifecycleEvent> {
+
+    @ApiStatus.Internal
+    abstract void add(final O owner, final LifecycleEventHandler<? super E> lifecycleEventHandler);
+
+    @ApiStatus.Internal
+    abstract String name();
+
+    @ApiStatus.Internal
+    abstract PluginMeta getPluginMeta(O owner);
+
+    @ApiStatus.Internal
+    abstract List<RegisteredHandler<O, E>> handlers();
+
+    @ApiStatus.Internal
+    record RegisteredHandler<O, E extends LifecycleEvent>(O owner, LifecycleEventHandler<? super E> lifecycleEventHandler) {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEvents.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEvents.java
new file mode 100644
index 0000000000000000000000000000000000000000..348bc4af6b70d7ac7f94fba9557be181ecc55a32
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/LifecycleEvents.java
@@ -0,0 +1,43 @@
+package io.papermc.paper.plugin.lifecycle.event;
+
+import io.papermc.paper.plugin.bootstrap.BootstrapContext;
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.lifecycle.LifecycleEvent;
+import io.papermc.paper.plugin.lifecycle.event.registrar.RegistrarEvent;
+import io.papermc.paper.plugin.lifecycle.dummy.DummyResourceRegistrar;
+import io.papermc.paper.plugin.lifecycle.dummy.NonRegistrarEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+public final class LifecycleEvents {
+
+    static final List<LifecycleEventType<?, ?>> LIFECYCLE_EVENT_TYPES = new ArrayList<>();
+
+    public static final LifecycleEventType<BootstrapContext, RegistrarEvent.Reloadable<DummyResourceRegistrar>> DUMMY = bootstrap("dummy");
+    public static final LifecycleEventType<Plugin, RegistrarEvent<DummyResourceRegistrar>> DUMMY_STATIC = plugin("dummy_static");
+    public static final LifecycleEventType<BootstrapContext, NonRegistrarEvent> NON_REGISTRAR_RELATED_EVENT = bootstrap("non_registrar");
+
+    @ApiStatus.Internal
+    private static <E extends LifecycleEvent> LifecycleEventType<Plugin, E> plugin(final String name) {
+        return createSimple(name, Plugin::getPluginMeta);
+    }
+
+    @ApiStatus.Internal
+    private static <E extends LifecycleEvent> LifecycleEventType<BootstrapContext, E> bootstrap(final String name) {
+        return createSimple(name, BootstrapContext::getConfiguration);
+    }
+
+    @ApiStatus.Internal
+    private static <O extends LifecycleEventOwner<O>, E extends LifecycleEvent> LifecycleEventType<O, E> createSimple(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        final LifecycleEventType<O, E> lifecycleEventType = new SimpleLifecycleEventType<>(name, getPluginMeta);
+        LIFECYCLE_EVENT_TYPES.add(lifecycleEventType);
+        return lifecycleEventType;
+    }
+
+    private LifecycleEvents() {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/SimpleLifecycleEventType.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/SimpleLifecycleEventType.java
new file mode 100644
index 0000000000000000000000000000000000000000..81caa8b178fa2c4a48ce5780d859941663d1abfa
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/SimpleLifecycleEventType.java
@@ -0,0 +1,42 @@
+package io.papermc.paper.plugin.lifecycle.event;
+
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.lifecycle.LifecycleEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+class SimpleLifecycleEventType<O extends LifecycleEventOwner<O>, E extends LifecycleEvent> extends LifecycleEventType<O, E> {
+
+    final String name;
+    final List<RegisteredHandler<O, E>> handlers = new ArrayList<>();
+    final Function<? super O, ? extends PluginMeta> getPluginMeta;
+
+    @ApiStatus.Internal
+    SimpleLifecycleEventType(final String name, final Function<? super O, ? extends PluginMeta> getPluginMeta) {
+        this.name = name;
+        this.getPluginMeta = getPluginMeta;
+    }
+
+    @Override
+    void add(final O owner, final LifecycleEventHandler<? super E> lifecycleEventHandler) {
+        this.handlers.add(new RegisteredHandler<>(owner, lifecycleEventHandler));
+    }
+
+    @Override
+    String name() {
+        return this.name;
+    }
+
+    @Override
+    PluginMeta getPluginMeta(final O owner) {
+        return this.getPluginMeta.apply(owner);
+    }
+
+    @Override
+    List<RegisteredHandler<O, E>> handlers() {
+        return this.handlers;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/package-info.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..da506a24a1c22f41a844d6b113751128e19b67fb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.lifecycle.event;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/registrar/RegistrarEvent.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/registrar/RegistrarEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..679974e4680d75c59077862fcbbf3867a1fb0989
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/registrar/RegistrarEvent.java
@@ -0,0 +1,25 @@
+package io.papermc.paper.plugin.lifecycle.event.registrar;
+
+import io.papermc.paper.plugin.lifecycle.LifecycleEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistrarEvent<R extends ResourceRegistrar> extends LifecycleEvent {
+
+    @NotNull R registrar();
+
+    @ApiStatus.Experimental
+    @ApiStatus.NonExtendable
+    interface Reloadable<R extends ResourceRegistrar> extends RegistrarEvent<R> {
+
+        @NotNull Cause cause();
+
+        @ApiStatus.Experimental
+        enum Cause {
+            INITIAL,
+            RELOAD
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/event/registrar/ResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/lifecycle/event/registrar/ResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..6bebcd6e61b98f218aa464b1005c7daa21f8e2b6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/event/registrar/ResourceRegistrar.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.lifecycle.event.registrar;
+
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * To be implemented by types that provide ways to register types
+ * either on server start or during a reload
+ */
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface ResourceRegistrar {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/package-info.java b/src/main/java/io/papermc/paper/plugin/lifecycle/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..85209f38cc654cc3a63d83f599cf828c341076fe
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/package-info.java
@@ -0,0 +1,9 @@
+/**
+ * A separate event system meant for registering values
+ * in both the bootstrap and regular plugin contexts.
+ */
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.lifecycle;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 4eb639fbb46a0848be207149ea433455550fae1c..178b58b9d593384e3cf74ec1630f651d21aeed7f 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -1,5 +1,6 @@
 package org.bukkit.plugin;
 
+import io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner;
 import java.io.File;
 import java.io.InputStream;
 import java.util.logging.Logger;
@@ -16,7 +17,7 @@ import org.jetbrains.annotations.Nullable;
  * <p>
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends TabExecutor {
+public interface Plugin extends TabExecutor, LifecycleEventOwner<Plugin> { // Paper
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 5cd236965de12392d8c7aa81307c0ff1cc8673b1..602543f3f3dd0e9e91a7c3ac69c48c59046840af 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -2,6 +2,9 @@ package org.bukkit.plugin.java;
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
+import io.papermc.paper.plugin.lifecycle.LifecycleEvent;
+import io.papermc.paper.plugin.lifecycle.event.LifecycleEventHandler;
+import io.papermc.paper.plugin.lifecycle.event.LifecycleEventType;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -22,10 +25,10 @@ import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginBase;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
-import org.bukkit.plugin.PluginLogger;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -279,8 +282,10 @@ public abstract class JavaPlugin extends PluginBase {
 
             if (isEnabled) {
                 onEnable();
+                this.allowLifecycleEventHandlerRegistration = false; // Paper
             } else {
                 onDisable();
+                this.allowLifecycleEventHandlerRegistration = true; // Paper
             }
         }
     }
@@ -456,4 +461,13 @@ public abstract class JavaPlugin extends PluginBase {
         }
         return plugin;
     }
+
+    // Paper start - lifecycle hooks
+    private boolean allowLifecycleEventHandlerRegistration = true;
+    @Override
+    public <E extends LifecycleEvent> void handleLifecycleEvent(final @NotNull LifecycleEventType<? super Plugin, E> lifecycleEventType, final @NotNull LifecycleEventHandler<? super E> lifecycleEventHandler) {
+        Preconditions.checkState(this.allowLifecycleEventHandlerRegistration, "Cannot add lifecycle event handlers after onEnable");
+        super.handleLifecycleEvent(lifecycleEventType, lifecycleEventHandler);
+    }
+    // Paper end - lifecycle hooks
 }
