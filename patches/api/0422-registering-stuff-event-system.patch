From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 18 Jul 2023 14:47:02 -0700
Subject: [PATCH] registering stuff event system


diff --git a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
index 08f2050356acaf74e3210416760e3873c2dafd2c..0eb5fba4aba41ab51861ae068eb7db1c15ccb390 100644
--- a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
+++ b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
@@ -10,5 +10,5 @@ import org.jetbrains.annotations.ApiStatus;
  */
 @ApiStatus.Experimental
 @ApiStatus.NonExtendable
-public interface BootstrapContext extends PluginProviderContext {
+public interface BootstrapContext extends PluginProviderContext, io.papermc.paper.plugin.register.event.RegisterEventOwner<BootstrapContext> {
 }
diff --git a/src/main/java/io/papermc/paper/plugin/register/RegisterEvent.java b/src/main/java/io/papermc/paper/plugin/register/RegisterEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..d5c008dd10b3a39da30ed0a1a6c792ccb0a59c22
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/RegisterEvent.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.plugin.register;
+
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegisterEvent {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/dummy/DummyResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/register/dummy/DummyResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..51898f162719bf357d790eb987d124f0a4004b06
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/dummy/DummyResourceRegistrar.java
@@ -0,0 +1,6 @@
+package io.papermc.paper.plugin.register.dummy;
+
+import io.papermc.paper.plugin.register.event.registrar.ResourceRegistrar;
+
+public class DummyResourceRegistrar implements ResourceRegistrar {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/dummy/NonRegistrarEvent.java b/src/main/java/io/papermc/paper/plugin/register/dummy/NonRegistrarEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..50799b303d367e3ca37f1231d6030c5246674989
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/dummy/NonRegistrarEvent.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.register.dummy;
+
+import io.papermc.paper.plugin.register.RegisterEvent;
+
+public class NonRegistrarEvent implements RegisterEvent {
+
+    public void someNonRegistrarRelatedThing() {
+        System.out.println("non registrar event");
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventHandler.java b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..cb9961934dcaf06198990432bf668339d3aa479e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventHandler.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.register.event;
+
+import io.papermc.paper.plugin.register.RegisterEvent;
+import org.jetbrains.annotations.NotNull;
+
+@FunctionalInterface
+public interface RegisterEventHandler<E extends RegisterEvent> {
+
+    void run(@NotNull E event);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventOwner.java b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventOwner.java
new file mode 100644
index 0000000000000000000000000000000000000000..2765d7424c22ff6b91590ff794c22eb2c9a1aed1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventOwner.java
@@ -0,0 +1,15 @@
+package io.papermc.paper.plugin.register.event;
+
+import io.papermc.paper.plugin.register.RegisterEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegisterEventOwner<O extends RegisterEventOwner<O>> {
+    
+    @SuppressWarnings("unchecked")
+    default <E extends RegisterEvent> void handleRegisterEvent(final @NotNull RegisterEventType<? super O, E> registerEventType, final @NotNull RegisterEventHandler<? super E> registerEventHandler) {
+        registerEventType.add((O) this, registerEventHandler);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventType.java b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventType.java
new file mode 100644
index 0000000000000000000000000000000000000000..b0cd63d759003cc75b6aacc4ef36dccd232d78b2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventType.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.plugin.register.event;
+
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.register.RegisterEvent;
+import java.util.List;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public abstract class RegisterEventType<O extends RegisterEventOwner<O>, E extends RegisterEvent> {
+
+    @ApiStatus.Internal
+    abstract void add(final O owner, final RegisterEventHandler<? super E> registerEventHandler);
+
+    @ApiStatus.Internal
+    abstract String name();
+
+    @ApiStatus.Internal
+    abstract PluginMeta getPluginMeta(O owner);
+
+    @ApiStatus.Internal
+    abstract List<RegisteredHandler<O, E>> handlers();
+
+    @ApiStatus.Internal
+    record RegisteredHandler<O, E extends RegisterEvent>(O owner, RegisterEventHandler<? super E> registerEventHandler) {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/event/RegisterEvents.java b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEvents.java
new file mode 100644
index 0000000000000000000000000000000000000000..d32ffe8ce3a8e59a4b0e33adc6fa47d5e5c2c765
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEvents.java
@@ -0,0 +1,43 @@
+package io.papermc.paper.plugin.register.event;
+
+import io.papermc.paper.plugin.bootstrap.BootstrapContext;
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.register.RegisterEvent;
+import io.papermc.paper.plugin.register.event.registrar.RegistrarEvent;
+import io.papermc.paper.plugin.register.dummy.DummyResourceRegistrar;
+import io.papermc.paper.plugin.register.dummy.NonRegistrarEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+public final class RegisterEvents {
+
+    static final List<RegisterEventType<?, ?>> REGISTER_EVENT_TYPES = new ArrayList<>();
+
+    public static final RegisterEventType<BootstrapContext, RegistrarEvent.Reloadable<DummyResourceRegistrar>> DUMMY = bootstrap("dummy");
+    public static final RegisterEventType<Plugin, RegistrarEvent<DummyResourceRegistrar>> DUMMY_STATIC = plugin("dummy_static");
+    public static final RegisterEventType<BootstrapContext, NonRegistrarEvent> NON_REGISTRAR_RELATED_EVENT = bootstrap("non_registrar");
+
+    @ApiStatus.Internal
+    private static <E extends RegisterEvent> RegisterEventType<Plugin, E> plugin(final String name) {
+        return createSimple(name, Plugin::getPluginMeta);
+    }
+
+    @ApiStatus.Internal
+    private static <E extends RegisterEvent> RegisterEventType<BootstrapContext, E> bootstrap(final String name) {
+        return createSimple(name, BootstrapContext::getConfiguration);
+    }
+
+    @ApiStatus.Internal
+    private static <O extends RegisterEventOwner<O>, E extends RegisterEvent> RegisterEventType<O, E> createSimple(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        final RegisterEventType<O, E> registerEventType = new SimpleRegisterEventType<>(name, getPluginMeta);
+        REGISTER_EVENT_TYPES.add(registerEventType);
+        return registerEventType;
+    }
+
+    private RegisterEvents() {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/event/SimpleRegisterEventType.java b/src/main/java/io/papermc/paper/plugin/register/event/SimpleRegisterEventType.java
new file mode 100644
index 0000000000000000000000000000000000000000..b54619f628277a6b06cf4c36e0b7e8b59f13aed2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/event/SimpleRegisterEventType.java
@@ -0,0 +1,42 @@
+package io.papermc.paper.plugin.register.event;
+
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.register.RegisterEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+class SimpleRegisterEventType<O extends RegisterEventOwner<O>, E extends RegisterEvent> extends RegisterEventType<O, E> {
+
+    final String name;
+    final List<RegisteredHandler<O, E>> handlers = new ArrayList<>();
+    final Function<? super O, ? extends PluginMeta> getPluginMeta;
+
+    @ApiStatus.Internal
+    SimpleRegisterEventType(final String name, final Function<? super O, ? extends PluginMeta> getPluginMeta) {
+        this.name = name;
+        this.getPluginMeta = getPluginMeta;
+    }
+
+    @Override
+    void add(final O owner, final RegisterEventHandler<? super E> registerEventHandler) {
+        this.handlers.add(new RegisteredHandler<>(owner, registerEventHandler));
+    }
+
+    @Override
+    String name() {
+        return this.name;
+    }
+
+    @Override
+    PluginMeta getPluginMeta(final O owner) {
+        return this.getPluginMeta.apply(owner);
+    }
+
+    @Override
+    List<RegisteredHandler<O, E>> handlers() {
+        return this.handlers;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/event/package-info.java b/src/main/java/io/papermc/paper/plugin/register/event/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..5cb779749ce166be978bdddfe975e62fbb51f0d3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/event/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.register.event;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/io/papermc/paper/plugin/register/event/registrar/RegistrarEvent.java b/src/main/java/io/papermc/paper/plugin/register/event/registrar/RegistrarEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..de99ed0d7a42cac3e063351b5188f6203b355ef3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/event/registrar/RegistrarEvent.java
@@ -0,0 +1,25 @@
+package io.papermc.paper.plugin.register.event.registrar;
+
+import io.papermc.paper.plugin.register.RegisterEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistrarEvent<R extends ResourceRegistrar> extends RegisterEvent {
+
+    @NotNull R registrar();
+
+    @ApiStatus.Experimental
+    @ApiStatus.NonExtendable
+    interface Reloadable<R extends ResourceRegistrar> extends RegistrarEvent<R> {
+
+        @NotNull Cause cause();
+
+        @ApiStatus.Experimental
+        enum Cause {
+            INITIAL,
+            RELOAD
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/event/registrar/ResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/register/event/registrar/ResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..9bafe9955155e773cf7bca21d65d2611c93a6368
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/event/registrar/ResourceRegistrar.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.register.event.registrar;
+
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * To be implemented by types that provide ways to register types
+ * either on server start or during a reload
+ */
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface ResourceRegistrar {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/package-info.java b/src/main/java/io/papermc/paper/plugin/register/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..cfbcbf45329ebfc6077b2b5c3c2a6bf12d6351d2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/package-info.java
@@ -0,0 +1,9 @@
+/**
+ * A separate event system meant for registering values
+ * in both the bootstrap and regular plugin contexts.
+ */
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.register;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 4eb639fbb46a0848be207149ea433455550fae1c..b2c8a5e17cae813886be6cff4552acc89670e9ee 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.Nullable;
  * <p>
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends TabExecutor {
+public interface Plugin extends TabExecutor, io.papermc.paper.plugin.register.event.RegisterEventOwner<Plugin> { // Paper
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 5cd236965de12392d8c7aa81307c0ff1cc8673b1..6c2135c1ff2653bb77f5b1dbac5f8152e2d9f1fd 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -2,6 +2,8 @@ package org.bukkit.plugin.java;
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
+import io.papermc.paper.plugin.register.event.RegisterEventHandler;
+import io.papermc.paper.plugin.register.event.RegisterEventType;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -22,10 +24,10 @@ import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginBase;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
-import org.bukkit.plugin.PluginLogger;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -279,8 +281,10 @@ public abstract class JavaPlugin extends PluginBase {
 
             if (isEnabled) {
                 onEnable();
+                this.allowRegisterEventHandlerRegistration = false; // Paper
             } else {
                 onDisable();
+                this.allowRegisterEventHandlerRegistration = true; // Paper
             }
         }
     }
@@ -456,4 +460,13 @@ public abstract class JavaPlugin extends PluginBase {
         }
         return plugin;
     }
+
+    // Paper start - register hooks
+    private boolean allowRegisterEventHandlerRegistration = true;
+    @Override
+    public <E extends io.papermc.paper.plugin.register.RegisterEvent> void handleRegisterEvent(final @NotNull RegisterEventType<? super Plugin, E> registerEventType, final @NotNull RegisterEventHandler<? super E> registerEventHandler) {
+        Preconditions.checkState(this.allowRegisterEventHandlerRegistration, "Cannot add register event handlers after onEnable");
+        super.handleRegisterEvent(registerEventType, registerEventHandler);
+    }
+    // Paper end - register hooks
 }
