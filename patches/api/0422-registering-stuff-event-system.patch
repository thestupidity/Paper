From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 18 Jul 2023 14:47:02 -0700
Subject: [PATCH] registering stuff event system


diff --git a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
index 08f2050356acaf74e3210416760e3873c2dafd2c..c4163c12460d402cb86974a510c655901264d513 100644
--- a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
+++ b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
@@ -10,5 +10,5 @@ import org.jetbrains.annotations.ApiStatus;
  */
 @ApiStatus.Experimental
 @ApiStatus.NonExtendable
-public interface BootstrapContext extends PluginProviderContext {
+public interface BootstrapContext extends PluginProviderContext, io.papermc.paper.plugin.event.hook.RegisterEventOwner<BootstrapContext> {
 }
diff --git a/src/main/java/io/papermc/paper/plugin/event/RegisterEvent.java b/src/main/java/io/papermc/paper/plugin/event/RegisterEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..e8fd963704e0530f1464fbfa7130f87c9f572bf0
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/RegisterEvent.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.plugin.event;
+
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegisterEvent {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/RegistrarEvent.java b/src/main/java/io/papermc/paper/plugin/event/RegistrarEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b2f21f0d88cb67300f69f13582d8c98d9bf4e760
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/RegistrarEvent.java
@@ -0,0 +1,24 @@
+package io.papermc.paper.plugin.event;
+
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistrarEvent<R extends ResourceRegistrar> extends RegisterEvent {
+
+    @NotNull R registrar();
+
+    @ApiStatus.Experimental
+    @ApiStatus.NonExtendable
+    interface Reloadable<R extends ResourceRegistrar> extends RegistrarEvent<R> {
+
+        @NotNull Cause cause();
+
+        @ApiStatus.Experimental
+        enum Cause {
+            INITIAL,
+            RELOAD
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/ResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/event/ResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..19a2293b2c4d33e45b0dc8bb25790ecd84aee413
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/ResourceRegistrar.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.event;
+
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * To be implemented by types that provide ways to register types
+ * either on server start or during a reload
+ */
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface ResourceRegistrar {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/dummy/DummyResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/event/dummy/DummyResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..c989f73fff722aec159649bfd7b69cb7e90469fb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/dummy/DummyResourceRegistrar.java
@@ -0,0 +1,6 @@
+package io.papermc.paper.plugin.event.dummy;
+
+import io.papermc.paper.plugin.event.ResourceRegistrar;
+
+public class DummyResourceRegistrar implements ResourceRegistrar {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/dummy/NonRegistrarEvent.java b/src/main/java/io/papermc/paper/plugin/event/dummy/NonRegistrarEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..08b2058d97db892537e5d1533507a9e40236ad42
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/dummy/NonRegistrarEvent.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.event.dummy;
+
+import io.papermc.paper.plugin.event.RegisterEvent;
+
+public class NonRegistrarEvent implements RegisterEvent {
+
+    public void someNonRegistrarRelatedThing() {
+        System.out.println("non registrar event");
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/hook/Hook.java b/src/main/java/io/papermc/paper/plugin/event/hook/Hook.java
new file mode 100644
index 0000000000000000000000000000000000000000..06d3a3e9937374d8202fb8c4aab144f6b45e037d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/hook/Hook.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.event.hook;
+
+import io.papermc.paper.plugin.event.RegisterEvent;
+import org.jetbrains.annotations.NotNull;
+
+@FunctionalInterface
+public interface Hook<E extends RegisterEvent> {
+
+    void run(@NotNull E event);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/hook/RegisterEventOwner.java b/src/main/java/io/papermc/paper/plugin/event/hook/RegisterEventOwner.java
new file mode 100644
index 0000000000000000000000000000000000000000..e04d866f0f6173d7cfff6f9fc88c2aab96e1b42f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/hook/RegisterEventOwner.java
@@ -0,0 +1,15 @@
+package io.papermc.paper.plugin.event.hook;
+
+import io.papermc.paper.plugin.event.RegisterEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegisterEventOwner<O extends RegisterEventOwner<O>> {
+    
+    @SuppressWarnings("unchecked")
+    default <E extends RegisterEvent> void registerHook(final @NotNull RegisterHook<O, E> registerHook, @NotNull Hook<? super E> hook) {
+        registerHook.add((O) this, hook);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/hook/RegisterHook.java b/src/main/java/io/papermc/paper/plugin/event/hook/RegisterHook.java
new file mode 100644
index 0000000000000000000000000000000000000000..c17e6450b274c21975037b394f5a7918d96ec747
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/hook/RegisterHook.java
@@ -0,0 +1,30 @@
+package io.papermc.paper.plugin.event.hook;
+
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.event.RegisterEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.jetbrains.annotations.ApiStatus;
+
+public final class RegisterHook<O extends RegisterEventOwner<O>, E extends RegisterEvent> {
+
+    final String name;
+    final List<RegisterHook.RegisteredHook<O, E>> hooks = new ArrayList<>();
+    final Function<? super O, PluginMeta> getPluginMeta;
+
+    @ApiStatus.Internal
+    RegisterHook(final String name, final Function<? super O, PluginMeta> getPluginMeta) {
+        this.name = name;
+        this.getPluginMeta = getPluginMeta;
+    }
+
+    @ApiStatus.Internal
+    void add(final O owner, final Hook<? super E> hook) {
+        this.hooks.add(new RegisteredHook<>(owner, hook));
+    }
+
+    @ApiStatus.Internal
+    record RegisteredHook<O, E extends RegisterEvent>(O owner, Hook<? super E> hook) {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/hook/RegisterHooks.java b/src/main/java/io/papermc/paper/plugin/event/hook/RegisterHooks.java
new file mode 100644
index 0000000000000000000000000000000000000000..eae74645a9ced4dc4ec5755e2178df96c38c8fd7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/hook/RegisterHooks.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.plugin.event.hook;
+
+import io.papermc.paper.plugin.bootstrap.BootstrapContext;
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.event.RegisterEvent;
+import io.papermc.paper.plugin.event.RegistrarEvent;
+import io.papermc.paper.plugin.event.dummy.DummyResourceRegistrar;
+import io.papermc.paper.plugin.event.dummy.NonRegistrarEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+public final class RegisterHooks {
+
+    static final List<RegisterHook<?, ?>> ALL_HOOKS = new ArrayList<>();
+
+    public static final RegisterHook<BootstrapContext, RegistrarEvent.Reloadable<DummyResourceRegistrar>> DUMMY = create("dummy", BootstrapContext::getConfiguration);
+    public static final RegisterHook<Plugin, RegistrarEvent<DummyResourceRegistrar>> DUMMY_STATIC = create("dummy_static", Plugin::getPluginMeta);
+    public static final RegisterHook<BootstrapContext, NonRegistrarEvent> NON_REGISTRAR_RELATED_EVENT = create("non_registrar", BootstrapContext::getConfiguration);
+
+    @ApiStatus.Internal
+    private static <O extends RegisterEventOwner<O>, E extends RegisterEvent> RegisterHook<O, E> create(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        final RegisterHook<O, E> registerHookType = new RegisterHook<>(name, getPluginMeta);
+        ALL_HOOKS.add(registerHookType);
+        return registerHookType;
+    }
+
+    private RegisterHooks() {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/hook/package-info.java b/src/main/java/io/papermc/paper/plugin/event/hook/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..ad5e26fcd1de96b9404b2c92572a235bb7159f4c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/hook/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.event.hook;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/io/papermc/paper/plugin/event/package-info.java b/src/main/java/io/papermc/paper/plugin/event/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..2089570e3bd508e3d705a1d903ef17d2f0000b08
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/package-info.java
@@ -0,0 +1,9 @@
+/**
+ * A separate event system meant for registering values
+ * in both the bootstrap and regular plugin contexts.
+ */
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.event;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 4eb639fbb46a0848be207149ea433455550fae1c..8152939a72c96fdbb87c1e57673a9fb3a1b950f3 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.Nullable;
  * <p>
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends TabExecutor {
+public interface Plugin extends TabExecutor, io.papermc.paper.plugin.event.hook.RegisterEventOwner<Plugin> { // Paper
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
