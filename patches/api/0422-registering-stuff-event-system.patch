From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 18 Jul 2023 14:47:02 -0700
Subject: [PATCH] registering stuff event system


diff --git a/src/main/java/io/papermc/paper/plugin/resource/ResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/resource/ResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..9dfd42060be6c37b20a1adcb12598eadbd7265a4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/ResourceRegistrar.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.resource;
+
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * To be implemented by types that provide ways to register types
+ * either on server start or during a reload
+ */
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface ResourceRegistrar {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/dummy/DummyResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/resource/dummy/DummyResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..6ca9ce66e64bf0fdec50895a4b17b014535e4727
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/dummy/DummyResourceRegistrar.java
@@ -0,0 +1,6 @@
+package io.papermc.paper.plugin.resource.dummy;
+
+import io.papermc.paper.plugin.resource.ResourceRegistrar;
+
+public class DummyResourceRegistrar implements ResourceRegistrar {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/dummy/NonRegistrarEvent.java b/src/main/java/io/papermc/paper/plugin/resource/dummy/NonRegistrarEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..c48d6891ac5fdf323cf3d0a70d8d329109dad954
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/dummy/NonRegistrarEvent.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.resource.dummy;
+
+import io.papermc.paper.plugin.resource.event.RegisterEvent;
+
+public class NonRegistrarEvent implements RegisterEvent {
+
+    public void someNonRegistrarRelatedThing() {
+        System.out.println("non registrar event");
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/event/RegisterEvent.java b/src/main/java/io/papermc/paper/plugin/resource/event/RegisterEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0e73eebe3e4bc2a8a3b670c6f4098d63f30653b3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/event/RegisterEvent.java
@@ -0,0 +1,9 @@
+package io.papermc.paper.plugin.resource.event;
+
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegisterEvent {
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/event/RegistrarEvent.java b/src/main/java/io/papermc/paper/plugin/resource/event/RegistrarEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..bebd3a8e70f98456cc43c6e03d3c333371f6467b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/event/RegistrarEvent.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.plugin.resource.event;
+
+import io.papermc.paper.plugin.resource.ResourceRegistrar;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+public sealed interface RegistrarEvent<R extends ResourceRegistrar> extends RegisterEvent {
+
+    @NotNull R registrar();
+
+    @ApiStatus.Experimental
+    @ApiStatus.NonExtendable
+    non-sealed interface Reloadable<R extends ResourceRegistrar> extends RegistrarEvent<R> {
+
+        @NotNull Cause cause();
+
+        @ApiStatus.Experimental
+        enum Cause {
+            INITIAL,
+            RELOAD
+        }
+    }
+
+    @ApiStatus.Experimental
+    @ApiStatus.NonExtendable
+    non-sealed interface Static<R extends ResourceRegistrar> extends RegistrarEvent<R> {
+
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/event/package-info.java b/src/main/java/io/papermc/paper/plugin/resource/event/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..15b24a6327e0146bc585a873fca393b0c7b3b743
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/event/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.resource.event;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/Hook.java b/src/main/java/io/papermc/paper/plugin/resource/hook/Hook.java
new file mode 100644
index 0000000000000000000000000000000000000000..458b3dc462d1d841365b2752eb984bd61860b2ca
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/Hook.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.resource.hook;
+
+import io.papermc.paper.plugin.resource.event.RegisterEvent;
+import org.jetbrains.annotations.NotNull;
+
+@FunctionalInterface
+public interface Hook<E extends RegisterEvent> {
+
+    void run(@NotNull E event);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookType.java b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookType.java
new file mode 100644
index 0000000000000000000000000000000000000000..4b85ab8a0c60b446686158ec914bc1875efb67dd
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookType.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.resource.hook;
+
+import io.papermc.paper.plugin.resource.event.RegisterEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public sealed interface RegisterHookType<O, E extends RegisterEvent> permits RegisterHookTypeImpl {
+
+    void add(@NotNull O owner, @NotNull Hook<E> hook);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookTypeImpl.java b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookTypeImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..7bc3a88238d9db4c92524619c44302fd322a4efa
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookTypeImpl.java
@@ -0,0 +1,31 @@
+package io.papermc.paper.plugin.resource.hook;
+
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.resource.event.RegisterEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+final class RegisterHookTypeImpl<O, E extends RegisterEvent> implements RegisterHookType<O, E> {
+
+    final String name;
+    final List<RegisteredHook<O, E>> hooks = new ArrayList<>();
+    final Function<O, PluginMeta> getPluginMeta;
+
+    RegisterHookTypeImpl(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        this.name = name;
+        this.getPluginMeta = getPluginMeta;
+    }
+
+    @Override
+    public void add(final O owner, final Hook<E> hook) {
+        this.hooks.add(new RegisteredHook<>(owner, hook));
+    }
+
+    @ApiStatus.Internal
+    record RegisteredHook<O, E extends RegisterEvent>(O owner, Hook<E> hook) {
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHooks.java b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHooks.java
new file mode 100644
index 0000000000000000000000000000000000000000..34ed947629cf4b160ae57e70e18e37c9f6862532
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHooks.java
@@ -0,0 +1,44 @@
+package io.papermc.paper.plugin.resource.hook;
+
+import io.papermc.paper.plugin.bootstrap.BootstrapContext;
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.resource.ResourceRegistrar;
+import io.papermc.paper.plugin.resource.dummy.DummyResourceRegistrar;
+import io.papermc.paper.plugin.resource.dummy.NonRegistrarEvent;
+import io.papermc.paper.plugin.resource.event.RegisterEvent;
+import io.papermc.paper.plugin.resource.event.RegistrarEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+public final class RegisterHooks {
+
+    static final List<RegisterHookTypeImpl<?, ?>> ALL_HOOKS = new ArrayList<>();
+
+    public static final RegisterHookType<BootstrapContext, RegistrarEvent.Reloadable<DummyResourceRegistrar>> DUMMY = reloadableRegistrar("dummy", BootstrapContext::getConfiguration);
+    public static final RegisterHookType<JavaPlugin, RegistrarEvent.Static<DummyResourceRegistrar>> DUMMY_STATIC = staticRegistrar("dummy_static", JavaPlugin::getPluginMeta);
+    public static final RegisterHookType<BootstrapContext, NonRegistrarEvent> NON_REGISTRAR_RELATED_EVENT = create("non_registrar", BootstrapContext::getConfiguration);
+
+    @ApiStatus.Internal
+    private static <O, R extends ResourceRegistrar> RegisterHookType<O, RegistrarEvent.Reloadable<R>> reloadableRegistrar(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        return create(name, getPluginMeta);
+    }
+
+    @ApiStatus.Internal
+    private static <O, R extends ResourceRegistrar> RegisterHookType<O, RegistrarEvent.Static<R>> staticRegistrar(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        return create(name, getPluginMeta);
+    }
+
+    @ApiStatus.Internal
+    private static <O, E extends RegisterEvent> RegisterHookType<O, E> create(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        final RegisterHookTypeImpl<O, E> registerHookType = new RegisterHookTypeImpl<>(name, getPluginMeta);
+        ALL_HOOKS.add(registerHookType);
+        return registerHookType;
+    }
+
+    private RegisterHooks() {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/package-info.java b/src/main/java/io/papermc/paper/plugin/resource/hook/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..3e5f5740629ee43feebf81ffd93aff29a334b293
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.resource.hook;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/io/papermc/paper/plugin/resource/package-info.java b/src/main/java/io/papermc/paper/plugin/resource/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..c94b499f3eb86d4754e341df9209003b44be8471
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.resource;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
