From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 18 Jul 2023 14:47:02 -0700
Subject: [PATCH] registering stuff event system


diff --git a/src/main/java/io/papermc/paper/plugin/resource/RegisterEvent.java b/src/main/java/io/papermc/paper/plugin/resource/RegisterEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..272f1e9b05cb90387fc05bdde5e760d56f57eb6b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/RegisterEvent.java
@@ -0,0 +1,30 @@
+package io.papermc.paper.plugin.resource;
+
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public sealed interface RegisterEvent<R extends ResourceRegistrar> permits RegisterEvent.Reloadable, RegisterEvent.Static {
+
+    @NotNull R registrar();
+
+    @ApiStatus.Experimental
+    @ApiStatus.NonExtendable
+    non-sealed interface Reloadable<R extends ResourceRegistrar> extends RegisterEvent<R> {
+
+        @NotNull Cause cause();
+
+        @ApiStatus.Experimental
+        enum Cause {
+            INITIAL,
+            RELOAD
+        }
+    }
+
+    @ApiStatus.Experimental
+    @ApiStatus.NonExtendable
+    non-sealed interface Static<R extends ResourceRegistrar> extends RegisterEvent<R> {
+
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/ResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/resource/ResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..9dfd42060be6c37b20a1adcb12598eadbd7265a4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/ResourceRegistrar.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.plugin.resource;
+
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * To be implemented by types that provide ways to register types
+ * either on server start or during a reload
+ */
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface ResourceRegistrar {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/dummy/DummyResourceRegistrar.java b/src/main/java/io/papermc/paper/plugin/resource/dummy/DummyResourceRegistrar.java
new file mode 100644
index 0000000000000000000000000000000000000000..cee507565a79a0c7b9a6ed17106db3d35a9c1535
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/dummy/DummyResourceRegistrar.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.plugin.resource.dummy;
+
+import io.papermc.paper.plugin.resource.ResourceRegistrar;
+
+public class DummyResourceRegistrar implements ResourceRegistrar {
+
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/event/package-info.java b/src/main/java/io/papermc/paper/plugin/resource/event/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..15b24a6327e0146bc585a873fca393b0c7b3b743
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/event/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.resource.event;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/Hook.java b/src/main/java/io/papermc/paper/plugin/resource/hook/Hook.java
new file mode 100644
index 0000000000000000000000000000000000000000..a20fc15b6f2e58da462376c6670fa8c115ad96d2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/Hook.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.plugin.resource.hook;
+
+import io.papermc.paper.plugin.resource.ResourceRegistrar;
+import io.papermc.paper.plugin.resource.RegisterEvent;
+
+@FunctionalInterface
+public interface Hook<O, R extends ResourceRegistrar, E extends RegisterEvent<R>> {
+
+    void run(E event);
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookType.java b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookType.java
new file mode 100644
index 0000000000000000000000000000000000000000..8b71b44614de8a8369ffff00ddc43b29ab28e7bd
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookType.java
@@ -0,0 +1,25 @@
+package io.papermc.paper.plugin.resource.hook;
+
+import io.papermc.paper.plugin.resource.ResourceRegistrar;
+import io.papermc.paper.plugin.resource.RegisterEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public sealed interface RegisterHookType<O, R extends ResourceRegistrar, E extends RegisterEvent<R>> permits RegisterHookType.Reloadable, RegisterHookType.Static, RegisterHookTypeImpl {
+
+    void add(@NotNull O owner, @NotNull Hook<O, R, E> hook);
+
+    @ApiStatus.Experimental
+    @ApiStatus.NonExtendable
+    non-sealed interface Reloadable<O, R extends ResourceRegistrar> extends RegisterHookType<O, R, RegisterEvent.Reloadable<R>> {
+
+    }
+
+    @ApiStatus.Experimental
+    @ApiStatus.NonExtendable
+    non-sealed interface Static<O, R extends ResourceRegistrar> extends RegisterHookType<O, R, RegisterEvent.Static<R>> {
+
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookTypeImpl.java b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookTypeImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..e64796e804201d780a9ca321e6256c8ddbb66de8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHookTypeImpl.java
@@ -0,0 +1,48 @@
+package io.papermc.paper.plugin.resource.hook;
+
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.resource.RegisterEvent;
+import io.papermc.paper.plugin.resource.ResourceRegistrar;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+abstract sealed class RegisterHookTypeImpl<O, R extends ResourceRegistrar, E extends RegisterEvent<R>> implements RegisterHookType<O, R, E> {
+
+    final String name;
+    final List<RegisteredHook<O, R, E>> hooks = new ArrayList<>();
+    final Function<O, PluginMeta> getPluginMeta;
+
+    private RegisterHookTypeImpl(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        this.name = name;
+        this.getPluginMeta = getPluginMeta;
+    }
+
+    @Override
+    public void add(final O owner, final Hook<O, R, E> hook) {
+        this.hooks.add(new RegisteredHook<>(owner, hook));
+    }
+
+    @ApiStatus.Internal
+    record RegisteredHook<O, R extends ResourceRegistrar, E extends RegisterEvent<R>>(O owner, Hook<O, R, E> hook) {
+    }
+
+    @ApiStatus.Internal
+    static final class StaticImpl<O, R extends ResourceRegistrar> extends RegisterHookTypeImpl<O, R, RegisterEvent.Static<R>> implements RegisterHookType.Static<O, R> {
+
+        StaticImpl(final String name, final Function<O, PluginMeta> getPluginMeta) {
+            super(name, getPluginMeta);
+        }
+    }
+
+    @ApiStatus.Internal
+    static final class ReloadableImpl<O, R extends ResourceRegistrar> extends RegisterHookTypeImpl<O, R, RegisterEvent.Reloadable<R>> implements RegisterHookType.Reloadable<O, R> {
+
+        ReloadableImpl(final String name, final Function<O, PluginMeta> getPluginMeta) {
+            super(name, getPluginMeta);
+        }
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHooks.java b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHooks.java
new file mode 100644
index 0000000000000000000000000000000000000000..dc3aee281c8207ed9b3fad5f7094555bb4bbc333
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/RegisterHooks.java
@@ -0,0 +1,37 @@
+package io.papermc.paper.plugin.resource.hook;
+
+import io.papermc.paper.plugin.bootstrap.BootstrapContext;
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import io.papermc.paper.plugin.resource.ResourceRegistrar;
+import io.papermc.paper.plugin.resource.dummy.DummyResourceRegistrar;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Function;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+public final class RegisterHooks {
+
+    static final List<RegisterHookTypeImpl<?, ?, ?>> ALL_HOOKS = new ArrayList<>();
+
+    public static final RegisterHookType.Reloadable<BootstrapContext, DummyResourceRegistrar> DUMMY = reloadableHook("dummy", BootstrapContext::getConfiguration);
+    public static final RegisterHookType.Static<JavaPlugin, DummyResourceRegistrar> DUMMY_STATIC = staticHook("dummy_static", JavaPlugin::getPluginMeta);
+
+    @ApiStatus.Internal
+    private static <O, R extends ResourceRegistrar> RegisterHookType.Reloadable<O, R> reloadableHook(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        final RegisterHookTypeImpl.ReloadableImpl<O, R> reloadable = new RegisterHookTypeImpl.ReloadableImpl<>(name, getPluginMeta);
+        ALL_HOOKS.add(reloadable);
+        return reloadable;
+    }
+
+    @ApiStatus.Internal
+    private static <O, R extends ResourceRegistrar> RegisterHookType.Static<O, R> staticHook(final String name, final Function<O, PluginMeta> getPluginMeta) {
+        final RegisterHookTypeImpl.StaticImpl<O, R> staticHook = new RegisterHookTypeImpl.StaticImpl<>(name, getPluginMeta);
+        ALL_HOOKS.add(staticHook);
+        return staticHook;
+    }
+
+    private RegisterHooks() {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/resource/hook/package-info.java b/src/main/java/io/papermc/paper/plugin/resource/hook/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..3e5f5740629ee43feebf81ffd93aff29a334b293
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/hook/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.resource.hook;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/io/papermc/paper/plugin/resource/package-info.java b/src/main/java/io/papermc/paper/plugin/resource/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..c94b499f3eb86d4754e341df9209003b44be8471
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/resource/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.resource;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
