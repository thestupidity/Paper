From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 18 Jul 2023 17:49:38 -0700
Subject: [PATCH] registering stuff event system


diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 9c7552968b8c017c71a7a77557a66a03ed89f125..313a454066419cfe5dcb5a8c6d0c65f49ed341f1 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -261,6 +261,15 @@ class PaperPluginInstanceManager {
                 + pluginName + " (Is it up to date?)", ex, plugin); // Paper
         }
 
+        // Paper start - register event system
+        try {
+            io.papermc.paper.plugin.register.event.RegisterEventRunner.unregisterAllEventHandlersFor(plugin);
+        } catch (Throwable ex) {
+            this.handlePluginException("Error occurred (in the plugin loader) while unregistering register hooks for "
+                + pluginName + " (Is it up to date?)", ex, plugin);
+        }
+        // Paper end
+
         try {
             this.server.getMessenger().unregisterIncomingPluginChannel(plugin);
             this.server.getMessenger().unregisterOutgoingPluginChannel(plugin);
diff --git a/src/main/java/io/papermc/paper/plugin/register/ReloadableRegisterEventImpl.java b/src/main/java/io/papermc/paper/plugin/register/ReloadableRegisterEventImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..95249dca784855c2a406b22c4a3efe15936afe61
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/ReloadableRegisterEventImpl.java
@@ -0,0 +1,4 @@
+package io.papermc.paper.plugin.register;
+
+public record ReloadableRegisterEventImpl<R extends ResourceRegistrar>(R registrar, Cause cause) implements RegistrarEvent.Reloadable<R> {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/StaticRegisterEventImpl.java b/src/main/java/io/papermc/paper/plugin/register/StaticRegisterEventImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..41415fe2ca7fefc52c93e997049854423f84418a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/StaticRegisterEventImpl.java
@@ -0,0 +1,4 @@
+package io.papermc.paper.plugin.register;
+
+public record StaticRegisterEventImpl<R extends ResourceRegistrar>(R registrar) implements RegistrarEvent<R> {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventRunner.java b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventRunner.java
new file mode 100644
index 0000000000000000000000000000000000000000..e005e860dfe92ff84ea005b181dc2094502d03d2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/event/RegisterEventRunner.java
@@ -0,0 +1,49 @@
+package io.papermc.paper.plugin.register.event;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.plugin.register.ResourceRegistrar;
+import io.papermc.paper.plugin.register.RegisterEvent;
+import io.papermc.paper.plugin.register.RegistrarEvent;
+import io.papermc.paper.plugin.register.ReloadableRegisterEventImpl;
+import io.papermc.paper.plugin.register.StaticRegisterEventImpl;
+import org.bukkit.plugin.Plugin;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
+import org.slf4j.Logger;
+
+@DefaultQualifier(NonNull.class)
+public final class RegisterEventRunner {
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    public static <O extends RegisterEventOwner<O>, E extends RegisterEvent> void callEvent(final RegisterEventType<O, E> registerEventType, final E event) {
+        for (final RegisterEventType.RegisteredHook<O, E> registeredHook : registerEventType.hooks()) {
+            try {
+                registeredHook.registerEventHandler().run(event);
+            } catch (Throwable ex) {
+                LOGGER.error("Could not run '{}' hook from {}", registerEventType.name(), registerEventType.getPluginMeta(registeredHook.owner()).getDisplayName(), ex);
+            }
+        }
+    }
+
+    public static void unregisterAllEventHandlersFor(final Plugin plugin) {
+        for (final RegisterEventType<?, ?> hookType : RegisterEvents.ALL_HOOKS) {
+            removeEventHandlersOwnedBy(hookType, plugin);
+        }
+    }
+
+    private static <O extends RegisterEventOwner<O>> void removeEventHandlersOwnedBy(final RegisterEventType<O, ?> hookType, final Plugin possibleOwner) {
+        hookType.hooks().removeIf(registeredHook -> hookType.getPluginMeta(registeredHook.owner()).getName().equals(possibleOwner.getPluginMeta().getName()));
+    }
+
+    public static <O extends RegisterEventOwner<O>, R extends ResourceRegistrar> void runStaticRegistrarEventHandler(final RegisterEventType<O, RegistrarEvent<R>> hookType, final R registrar) {
+        callEvent(hookType, new StaticRegisterEventImpl<>(registrar));
+    }
+
+    public static <O extends RegisterEventOwner<O>, R extends ResourceRegistrar> void runReloadableRegistrarEventHandler(final RegisterEventType<O, RegistrarEvent.Reloadable<R>> hookType, final R registrar, final RegistrarEvent.Reloadable.Cause cause) {
+        callEvent(hookType, new ReloadableRegisterEventImpl<>(registrar, cause));
+    }
+
+    private RegisterEventRunner() {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/register/package-info.java b/src/main/java/io/papermc/paper/plugin/register/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..4afa99311dc959cd0fa84e8d97e77879ee226a91
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/register/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.register;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/io/papermc/paper/plugin/storage/BootstrapProviderStorage.java b/src/main/java/io/papermc/paper/plugin/storage/BootstrapProviderStorage.java
index 31ec730e63adf82bf9ac02331bc7f186b98c35cf..98aa8cb5053a02fcd575dedd8ab4020c411623d7 100644
--- a/src/main/java/io/papermc/paper/plugin/storage/BootstrapProviderStorage.java
+++ b/src/main/java/io/papermc/paper/plugin/storage/BootstrapProviderStorage.java
@@ -32,6 +32,7 @@ public class BootstrapProviderStorage extends SimpleProviderStorage<PluginBootst
                 try {
                     BootstrapContext context = PluginBootstrapContextImpl.of(provider, PluginInitializerManager.instance().pluginDirectoryPath());
                     provided.bootstrap(context);
+                    // TODO somehow lock registering hooks for this BootstrapContext object (might require changing it away from a record)
                     return true;
                 } catch (Throwable e) {
                     LOGGER.error("Failed to run bootstrapper for %s. This plugin will not be loaded.".formatted(provider.getSource()), e);
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index dae36c6452ccd57a436dd918547b64d59957ab0a..1b185c2482c4b33a3972bb535543ff939f9aa827 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -130,6 +130,9 @@ public class Main {
             Path path1 = Paths.get("server.properties");
             DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
 
+            io.papermc.paper.plugin.register.event.RegisterEventRunner.runReloadableRegistrarEventHandler(io.papermc.paper.plugin.register.event.RegisterEvents.DUMMY,new io.papermc.paper.plugin.register.dummy.DummyResourceRegistrar(), io.papermc.paper.plugin.register.RegistrarEvent.Reloadable.Cause.INITIAL); // Paper
+            io.papermc.paper.plugin.register.event.RegisterEventRunner.callEvent(io.papermc.paper.plugin.register.event.RegisterEvents.NON_REGISTRAR_RELATED_EVENT, new io.papermc.paper.plugin.register.dummy.NonRegistrarEvent()); // Paper
+
             dedicatedserversettings.forceSave();
             Path path2 = Paths.get("eula.txt");
             Eula eula = new Eula(path2);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3238cbcba567b1242c77e41f6b6f19a8d157fb4e..e46a852730dbd41b7de9b2af0d0bba80e3ffb122 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -635,6 +635,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
+        io.papermc.paper.plugin.register.event.RegisterEventRunner.runStaticRegistrarEventHandler(io.papermc.paper.plugin.register.event.RegisterEvents.DUMMY_STATIC, new io.papermc.paper.plugin.register.dummy.DummyResourceRegistrar()); // Paper
         this.connection.acceptConnections();
     }
     // CraftBukkit end
@@ -2092,6 +2093,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.functionManager.replaceLibrary(this.resources.managers.getFunctionLibrary());
             this.structureTemplateManager.onResourceManagerReload(this.resources.resourceManager);
             org.bukkit.craftbukkit.block.data.CraftBlockData.reloadCache(); // Paper - cache block data strings, they can be defined by datapacks so refresh it here
+            io.papermc.paper.plugin.register.event.RegisterEventRunner.runReloadableRegistrarEventHandler(io.papermc.paper.plugin.register.event.RegisterEvents.DUMMY,new io.papermc.paper.plugin.register.dummy.DummyResourceRegistrar(), io.papermc.paper.plugin.register.RegistrarEvent.Reloadable.Cause.RELOAD); // Paper
             new io.papermc.paper.event.server.ServerResourcesReloadedEvent(cause).callEvent(); // Paper - fire after everything has been reloaded
         }, this);
 
