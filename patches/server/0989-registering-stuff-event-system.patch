From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 18 Jul 2023 17:49:38 -0700
Subject: [PATCH] registering stuff event system


diff --git a/src/main/java/io/papermc/paper/plugin/event/ReloadableRegisterEventImpl.java b/src/main/java/io/papermc/paper/plugin/event/ReloadableRegisterEventImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4ee182106258ac05f667173466569e2a399a82e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/ReloadableRegisterEventImpl.java
@@ -0,0 +1,4 @@
+package io.papermc.paper.plugin.event;
+
+public record ReloadableRegisterEventImpl<R extends ResourceRegistrar>(R registrar, Cause cause) implements RegistrarEvent.Reloadable<R> {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/StaticRegisterEventImpl.java b/src/main/java/io/papermc/paper/plugin/event/StaticRegisterEventImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..09497a079ba27bc04315b8d6eeced14ef779cd9c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/StaticRegisterEventImpl.java
@@ -0,0 +1,4 @@
+package io.papermc.paper.plugin.event;
+
+public record StaticRegisterEventImpl<R extends ResourceRegistrar>(R registrar) implements RegistrarEvent<R> {
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/hook/HookRunner.java b/src/main/java/io/papermc/paper/plugin/event/hook/HookRunner.java
new file mode 100644
index 0000000000000000000000000000000000000000..3474a3cf70fff47f1e32d2d99456149c305b6ed1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/hook/HookRunner.java
@@ -0,0 +1,50 @@
+package io.papermc.paper.plugin.event.hook;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.plugin.event.ResourceRegistrar;
+import io.papermc.paper.plugin.event.RegisterEvent;
+import io.papermc.paper.plugin.event.RegistrarEvent;
+import io.papermc.paper.plugin.event.ReloadableRegisterEventImpl;
+import io.papermc.paper.plugin.event.StaticRegisterEventImpl;
+import org.bukkit.plugin.Plugin;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
+import org.slf4j.Logger;
+
+@DefaultQualifier(NonNull.class)
+public final class HookRunner {
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    public static <O, E extends RegisterEvent> void runHook(final RegisterHook<O, E> hookType, final E event) {
+        final RegisterHookImpl<O, E> registerHookType = (RegisterHookImpl<O, E>) hookType;
+        for (final RegisterHookImpl.RegisteredHook<O, E> registeredHook : registerHookType.hooks) {
+            try {
+                registeredHook.hook().run(event);
+            } catch (Throwable ex) {
+                LOGGER.error("Could not run '{}' hook from {}", registerHookType.name, registerHookType.getPluginMeta.apply(registeredHook.owner()).getDisplayName(), ex);
+            }
+        }
+    }
+
+    public static void unregisterAllHooksFor(final Plugin plugin) {
+        for (final RegisterHookImpl<?, ?> hookType : RegisterHooks.ALL_HOOKS) {
+            removeHooksOwnedByPlugin(hookType, plugin);
+        }
+    }
+
+    private static <O> void removeHooksOwnedByPlugin(final RegisterHookImpl<O, ?> hookType, final Plugin possibleOwner) {
+        hookType.hooks.removeIf(registeredHook -> hookType.getPluginMeta.apply(registeredHook.owner()).getName().equals(possibleOwner.getPluginMeta().getName()));
+    }
+
+    public static <O, R extends ResourceRegistrar> void runStaticRegistrarHook(final RegisterHook<O, RegistrarEvent<R>> hookType, final R registrar) {
+        runHook(hookType, new StaticRegisterEventImpl<>(registrar));
+    }
+
+    public static <O, R extends ResourceRegistrar> void runReloadableRegistrarHook(final RegisterHook<O, RegistrarEvent.Reloadable<R>> hookType, final R registrar, final RegistrarEvent.Reloadable.Cause cause) {
+        runHook(hookType, new ReloadableRegisterEventImpl<>(registrar, cause));
+    }
+
+    private HookRunner() {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/event/package-info.java b/src/main/java/io/papermc/paper/plugin/event/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..5f6d7f3a32e16d72652c7ca9c7a1104e8be42cb4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/event/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.plugin.event;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 9c7552968b8c017c71a7a77557a66a03ed89f125..8e85366023fbd1cf4264dad3a736f4d315e4c23d 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -261,6 +261,15 @@ class PaperPluginInstanceManager {
                 + pluginName + " (Is it up to date?)", ex, plugin); // Paper
         }
 
+        // Paper start - register event system
+        try {
+            io.papermc.paper.plugin.event.hook.HookRunner.unregisterAllHooksFor(plugin);
+        } catch (Throwable ex) {
+            this.handlePluginException("Error occurred (in the plugin loader) while unregistering register hooks for "
+                + pluginName + " (Is it up to date?)", ex, plugin);
+        }
+        // Paper end
+
         try {
             this.server.getMessenger().unregisterIncomingPluginChannel(plugin);
             this.server.getMessenger().unregisterOutgoingPluginChannel(plugin);
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index dae36c6452ccd57a436dd918547b64d59957ab0a..251b6c038746ea72ac71483b508d3dbf9be694a1 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -130,6 +130,9 @@ public class Main {
             Path path1 = Paths.get("server.properties");
             DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
 
+            io.papermc.paper.plugin.event.hook.HookRunner.runReloadableRegistrarHook(io.papermc.paper.plugin.event.hook.RegisterHooks.DUMMY,new io.papermc.paper.plugin.event.dummy.DummyResourceRegistrar(), io.papermc.paper.plugin.event.RegistrarEvent.Reloadable.Cause.INITIAL); // Paper
+            io.papermc.paper.plugin.event.hook.HookRunner.runHook(io.papermc.paper.plugin.event.hook.RegisterHooks.NON_REGISTRAR_RELATED_EVENT, new io.papermc.paper.plugin.event.dummy.NonRegistrarEvent()); // Paper
+
             dedicatedserversettings.forceSave();
             Path path2 = Paths.get("eula.txt");
             Eula eula = new Eula(path2);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3238cbcba567b1242c77e41f6b6f19a8d157fb4e..721e6c4f101beb732f8abd3d32679c2cc30f4e62 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -635,6 +635,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
+        io.papermc.paper.plugin.event.hook.HookRunner.runStaticRegistrarHook(io.papermc.paper.plugin.event.hook.RegisterHooks.DUMMY_STATIC, new io.papermc.paper.plugin.event.dummy.DummyResourceRegistrar()); // Paper
         this.connection.acceptConnections();
     }
     // CraftBukkit end
@@ -2092,6 +2093,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.functionManager.replaceLibrary(this.resources.managers.getFunctionLibrary());
             this.structureTemplateManager.onResourceManagerReload(this.resources.resourceManager);
             org.bukkit.craftbukkit.block.data.CraftBlockData.reloadCache(); // Paper - cache block data strings, they can be defined by datapacks so refresh it here
+            io.papermc.paper.plugin.event.hook.HookRunner.runReloadableRegistrarHook(io.papermc.paper.plugin.event.hook.RegisterHooks.DUMMY,new io.papermc.paper.plugin.event.dummy.DummyResourceRegistrar(), io.papermc.paper.plugin.event.RegistrarEvent.Reloadable.Cause.RELOAD); // Paper
             new io.papermc.paper.event.server.ServerResourcesReloadedEvent(cause).callEvent(); // Paper - fire after everything has been reloaded
         }, this);
 
